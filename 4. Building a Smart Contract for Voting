
## 4. Building a Smart Contract for Voting
Now, let's create the smart contract for our voting dApp.

Creating a New Truffle Project:

Open your terminal and create a new directory for your project: 
```
mkdir VotingDApp && cd VotingDApp
```
Initialize a new Truffle project: 
```
truffle init
```
Writing the Voting Smart Contract:
Create a new file named `Voting.sol` in the contracts directory and paste the following code:

```
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Voting {
    address public owner;
    uint public yesVotes;
    uint public noVotes;
    uint public endTime;
    bool public ended;

    mapping(address => bool) public hasVoted;

    constructor(uint _votingDuration) {
        owner = msg.sender;
        endTime = block.timestamp + _votingDuration;
        ended = false;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function.");
        _;
    }

    modifier votingActive() {
        require(block.timestamp < endTime, "Voting period has ended.");
        _;
    }

    modifier votingEnded() {
        require(block.timestamp >= endTime, "Voting period is still active.");
        _;
    }

    function vote(bool _vote) public votingActive {
        require(!hasVoted[msg.sender], "You have already voted.");

        if (_vote) {
            yesVotes++;
        } else {
            noVotes++;
        }
        hasVoted[msg.sender] = true;
    }

    function endVoting() public onlyOwner votingEnded {
        ended = true;
    }

    function getResults() public view returns (uint, uint) {
        require(ended, "Voting is still ongoing.");
        return (yesVotes, noVotes);
    }
}
```
Compiling and Migrating the Smart Contract:

Compile the contract: 
```
truffle compile
```
Create a migration script in the migrations directory. Create a new file named `2_deploy_contracts.js` with the following content:
```
const Voting = artifacts.require("Voting");

module.exports = function (deployer) {
    const votingDuration = 60 * 60 * 24; // 24 hours in seconds
    deployer.deploy(Voting, votingDuration);
};
```
Migrate the contract to the blockchain: 
```
truffle migrate
```
Create a migration script in the migrations directory. Create a new file named ```2_deploy_contracts.js```:
```
const Voting = artifacts.require("Voting");

module.exports = function (deployer) {

  const votingDuration = 60 * 60 * 24; // 24 hours in seconds

  deployer.deploy(Voting, votingDuration);

};
```
Migrate the contract to the blockchain:
```
truffle migrate
```
[ðŸ‘‰Next Lesson: Writing a web3 application to interact with the smart contract](https://github.com/JaveriaTariq/A-beginner-s-tutorial-on-creating-a-simple-voting-dApp-using-Ethereum-and-Solidity/blob/main/5.%20Writing%20a%20Web3%20Application%20to%20Interact%20with%20the%20Smart%20Contract)

